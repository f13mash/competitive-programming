import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class GameOnABoardTest {

    protected GameOnABoard solution;

    @Before
    public void setUp() {
        solution = new GameOnABoard();
    }

    @Test(timeout = 2000)
    public void testCase0() {
        String[] cost = new String[]{"11", "10"};

        int expected = 2;
        int actual = solution.optimalChoice(cost);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase1() {
        String[] cost = new String[]{"01", "10"};

        int expected = 1;
        int actual = solution.optimalChoice(cost);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase2() {
        String[] cost = new String[]{"111001", "001000", "111111", "001111", "001100", "001011", "111001", "010011"};

        int expected = 3;
        int actual = solution.optimalChoice(cost);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase3() {
        String[] cost = new String[]{"001001101011", "110011001101", "111111000001", "111101010001", "011100101111", "110010111000", "111111110101", "111011110111", "111100100011", "000000000110", "101011011110", "011111000111", "101111001011"};

        int expected = 5;
        int actual = solution.optimalChoice(cost);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase4() {
        String[] cost = new String[]{};
        int expected = 7;
        int actual = solution.optimalChoice(cost);

        Assert.assertEquals(expected, actual);
    }

}
